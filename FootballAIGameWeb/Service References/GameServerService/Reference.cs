//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FootballAIGameWeb.GameServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServerService.IGameServerService")]
    public interface IGameServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/WantsToPlay", ReplyAction="http://tempuri.org/IGameServerService/WantsToPlayResponse")]
        string WantsToPlay(string userName, string ai);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/WantsToPlay", ReplyAction="http://tempuri.org/IGameServerService/WantsToPlayResponse")]
        System.Threading.Tasks.Task<string> WantsToPlayAsync(string userName, string ai);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/StartGame", ReplyAction="http://tempuri.org/IGameServerService/StartGameResponse")]
        string StartGame(string userName1, string ai1, string userName2, string ai2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/StartGame", ReplyAction="http://tempuri.org/IGameServerService/StartGameResponse")]
        System.Threading.Tasks.Task<string> StartGameAsync(string userName1, string ai1, string userName2, string ai2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/CancelMatch", ReplyAction="http://tempuri.org/IGameServerService/CancelMatchResponse")]
        void CancelMatch(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/CancelMatch", ReplyAction="http://tempuri.org/IGameServerService/CancelMatchResponse")]
        System.Threading.Tasks.Task CancelMatchAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/LeaveRunningTournament", ReplyAction="http://tempuri.org/IGameServerService/LeaveRunningTournamentResponse")]
        void LeaveRunningTournament(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/LeaveRunningTournament", ReplyAction="http://tempuri.org/IGameServerService/LeaveRunningTournamentResponse")]
        System.Threading.Tasks.Task LeaveRunningTournamentAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/PlanTournament", ReplyAction="http://tempuri.org/IGameServerService/PlanTournamentResponse")]
        void PlanTournament(int tournamentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/PlanTournament", ReplyAction="http://tempuri.org/IGameServerService/PlanTournamentResponse")]
        System.Threading.Tasks.Task PlanTournamentAsync(int tournamentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/CancelLooking", ReplyAction="http://tempuri.org/IGameServerService/CancelLookingResponse")]
        void CancelLooking(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/CancelLooking", ReplyAction="http://tempuri.org/IGameServerService/CancelLookingResponse")]
        System.Threading.Tasks.Task CancelLookingAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/GetCurrentMatchStep", ReplyAction="http://tempuri.org/IGameServerService/GetCurrentMatchStepResponse")]
        int GetCurrentMatchStep(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServerService/GetCurrentMatchStep", ReplyAction="http://tempuri.org/IGameServerService/GetCurrentMatchStepResponse")]
        System.Threading.Tasks.Task<int> GetCurrentMatchStepAsync(string playerName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServerServiceChannel : FootballAIGameWeb.GameServerService.IGameServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServerServiceClient : System.ServiceModel.ClientBase<FootballAIGameWeb.GameServerService.IGameServerService>, FootballAIGameWeb.GameServerService.IGameServerService {
        
        public GameServerServiceClient() {
        }
        
        public GameServerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string WantsToPlay(string userName, string ai) {
            return base.Channel.WantsToPlay(userName, ai);
        }
        
        public System.Threading.Tasks.Task<string> WantsToPlayAsync(string userName, string ai) {
            return base.Channel.WantsToPlayAsync(userName, ai);
        }
        
        public string StartGame(string userName1, string ai1, string userName2, string ai2) {
            return base.Channel.StartGame(userName1, ai1, userName2, ai2);
        }
        
        public System.Threading.Tasks.Task<string> StartGameAsync(string userName1, string ai1, string userName2, string ai2) {
            return base.Channel.StartGameAsync(userName1, ai1, userName2, ai2);
        }
        
        public void CancelMatch(string playerName) {
            base.Channel.CancelMatch(playerName);
        }
        
        public System.Threading.Tasks.Task CancelMatchAsync(string playerName) {
            return base.Channel.CancelMatchAsync(playerName);
        }
        
        public void LeaveRunningTournament(string playerName) {
            base.Channel.LeaveRunningTournament(playerName);
        }
        
        public System.Threading.Tasks.Task LeaveRunningTournamentAsync(string playerName) {
            return base.Channel.LeaveRunningTournamentAsync(playerName);
        }
        
        public void PlanTournament(int tournamentId) {
            base.Channel.PlanTournament(tournamentId);
        }
        
        public System.Threading.Tasks.Task PlanTournamentAsync(int tournamentId) {
            return base.Channel.PlanTournamentAsync(tournamentId);
        }
        
        public void CancelLooking(string playerName) {
            base.Channel.CancelLooking(playerName);
        }
        
        public System.Threading.Tasks.Task CancelLookingAsync(string playerName) {
            return base.Channel.CancelLookingAsync(playerName);
        }
        
        public int GetCurrentMatchStep(string playerName) {
            return base.Channel.GetCurrentMatchStep(playerName);
        }
        
        public System.Threading.Tasks.Task<int> GetCurrentMatchStepAsync(string playerName) {
            return base.Channel.GetCurrentMatchStepAsync(playerName);
        }
    }
}
