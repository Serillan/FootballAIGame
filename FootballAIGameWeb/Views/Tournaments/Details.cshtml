@using FootballAIGameWeb.Models
@model FootballAIGameWeb.ViewModels.Tournaments.TournamentDetailsViewModel

@{
    ViewBag.Title = "Tournament Details";
}

<h2 class="text-center">
    Tournament Details
</h2>

<div class="container col-sm-4 text-center">
    <h3>Players</h3>
    <table class="table table-hover">
        <thead>
        <tr>
            @if (Model.Tournament.TournamentState == TournamentState.Finished)
            {
                <th class="text-center">Position</th>
            }
            <th class="text-center">Name</th>
            <th class="text-center">Score</th>
            <th class="text-center">Details</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var playerT in Model.Tournament.Players)
            {
                <tr>
                    @if (Model.Tournament.TournamentState == TournamentState.Finished)
                    {
                        <td>@playerT.PlayerPosition</td>
                    }
                    <td>@playerT.Player.Name</td>
                    <td>@playerT.Player.Score</td>
                    <td><a href="/Players/Details/@playerT.Player.Name">Details</a></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="container col-sm-4 text-center">
    <h4>@Model.Tournament.Name (@Model.Tournament.StartTime)</h4>
    <p style="margin-top: 4em"><h6>State</h6> 
    @{
        switch (Model.Tournament.TournamentState)
        {
            case TournamentState.Unstarted:
                <text>Not yet started</text>
                break;
            case TournamentState.Finished:
                <text>Finished</text>
                break;
            case TournamentState.NotEnoughtPlayersClosed:
                <text>Closed - There was not enough players signed at start time</text>
                break;
            case TournamentState.Running:
                <text>Currently running</text>
                break;
        }
    }</p>
    <p><h6>Number of Signed Players</h6> @Model.Tournament.Players.Count</p>
    <p><h6>Minimum Number of Players</h6> @Model.Tournament.MinimumNumberOfPlayers</p>
    <p><h6>Maximum Number of Players</h6> @Model.Tournament.MaximumNumberOfPlayers</p>
</div>

<div class="container col-sm-4 text-center">
    @if (Model.Tournament.TournamentState == TournamentState.Unstarted)
    {
        @Html.Partial("_TournamentJoin");
    }
    else
    {
        @Html.Partial("_TournanamentMatches");
    }
</div>


@section scripts {
    <script>
        $(document).ready(function() {
            $("select#ai-selection").editableSelect();
            $("button#join").on("click", function() {
                var selectedAi = $("input#ai-selection").val();

                $.ajax({
                    url: "/api/game/jointournament/@Model.Tournament.Id/@Model.CurrentPlayer.UserId/" + selectedAi,
                    method: "post",
                    success: function() {
                        location.reload();
                    },
                    error: function(xhr, status, error) {
                        toastr.error(xhr.responseText.message);
                    }
                });
            });


        });
    </script>
}