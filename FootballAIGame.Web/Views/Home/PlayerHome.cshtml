@using System.Web.Http.Routing
@using FootballAIGame.DbModel.Models
@model FootballAIGame.Web.ViewModels.Home.PlayerHomeViewModel
@{
    ViewBag.Title = "Home";
}



<div class="form-horizontal">
    @* for correct vertical alignment of Name label *@
    <div class="container col-sm-3 text-center table-responsive" style="margin-top: 2em">
        <h3>Active AIs</h3>
        <table id="ai-table" class="table table-hover" style="border: 2px solid white">
            <thead><tr><th class="text-center">Select AI to play with.</th></tr></thead>
            <tbody id="aiTableBody">
                @foreach (var ai in Model.ActiveAIs)
                {
                    if (ai == Model.Player.SelectedAI)
                    {
                        <tr class="selectable-row success" data-selected><td>@ai</td></tr>
                    }
                    else
                    {
                        <tr class="selectable-row"><td>@ai</td></tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="container col-sm-5 text-center" style="margin-top: 2em; text-align: center">
        <h3>Score: @Model.Player.Score</h3>
        <button id="random" type="submit" class="btn btn-primary" style="white-space: normal; margin: 1em; margin-top: 4em">Match against random opponent</button>
        <div class="col-sm-12" style="margin-top: 1em">
            <button autofocus id="challenge" type="submit" class="btn btn-default" style="margin: 1em auto">Challenge Player</button>
            <div class="form-group text-center col-sm-12" style="margin: 0 auto">
                @Html.LabelFor(m => m.OpponentPlayerName, new { @class = "col-sm-1 col-sm-offset-2 control-label", style = "margin-right: 1em" })
                <div class="col-sm-7">
                    @Html.TextBoxFor(m => m.OpponentPlayerName, new { @class = "form-control", style = "margin: 0 auto; max-width: 15em" })
                    <span class="field-validation-valid text-danger" data-valmsg-for="OpponentPlayerName"></span>
                </div>
            </div>
        </div>


    </div>

    <div class="container col-sm-4 text-center table-responsive" style="margin-top: 2em">
        <!-- old offset = 4 -->
        <h3>Last Matches</h3>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th class="text-center">Result</th>
                    <th class="text-center">AI</th>
                    <th class="text-center">Opponent</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in Model.LastMatches)
                {
                    var playerNumber = match.Player1 == Model.Player ? 1 : 2;
                    var playerAi = playerNumber == 1 ? match.Player1Ai : match.Player2Ai;
                    var otherPlayer = playerNumber == 1 ? match.Player2 : match.Player1;

                    string trClass;
                    string result;
                    if (match.Winner == 0)
                    {
                        trClass = "";
                        result = "Draw";
                    }
                    else if (match.Winner == playerNumber)
                    {
                        trClass = "success";
                        result = "Win";
                    }
                    else
                    {
                        trClass = "danger";
                        result = "Loose";
                    }

                    <tr class="clickable-row @trClass" data-href="@Url.Action("Details", "Matches", new { id = match.Id})">
                        <td>@result</td>
                        <td>@playerAi</td>
                        <td>@otherPlayer.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="container col-sm-12" style="margin-top: 2em">
        <div class="container col-sm-3 text-center table-responsive">
            <h3>Challenges</h3>
            <table style="margin: 0 auto" class="table-hover">
                <tbody id="challengesTableBody">
                    @foreach (var player in Model.Challenges)
                    {
                        <tr>
                            <td id="name">@player.Name</td>
                            <td><button class="btn btn-link accept-challenge" data-value="@player.Name">Accept</button></td>
                            <td><button type="button" class="btn btn-link decline-challenge" data-value="@player.Name">Decline</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="container col-sm-5" style="text-align: center">

            <div class="container text-center col-sm-12" style="margin-top: 2em">
                @Html.ActionLink("Current Tournaments", "Current", new { controller = "Tournaments" }, new { @class = "btn btn-default" })
                <h5 style="margin-top: 5em">Access Key</h5>
                @Model.Player.AccessKey
            </div>

        </div>

        <div class="container col-sm-4" style="text-align: center">
            <h3>Joined Tournaments</h3>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="text-center">Time</th>
                        <th class="text-center">Name</th>
                        <th class="text-center">Players</th>
                        <th class="text-center">AI</th>
                    </tr>
                </thead>
                <tbody id="joined-tournaments">
                    @foreach (var tournament in Model.JoinedTournaments)
                    {
                        var trClass = "success";
                        if (tournament.TournamentState != TournamentState.Unstarted)
                        {
                            trClass = "danger";
                        }

                        <tr class="clickable-row @trClass" data-href="@Url.Action("Details", "Tournaments", new { id = tournament.Id })">
                            <td>@tournament.StartTime</td>
                            <td>@tournament.Name</td>
                            <td>@tournament.Players.Count() / @tournament.MaximumNumberOfPlayers</td>
                            <td>@tournament.Players.Single(tp => tp.Player == Model.Player).PlayerAi</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document)
            .ready(function() {

                $("#game-form")
                    .submit(function(e) {
                        e.preventDefault();
                    });

                var aiMustBeSelected = function() {
                    if ($("table#ai-table tr.selectable-row[data-selected]").length === 0) {
                        $("table#ai-table").css("border", "2px solid red");
                        if ($("table#ai-table tr.selectable-row").length === 0) {
                            toastr.error("You need to have an active AI.");
                            return false;
                        } else {
                            toastr.error("AI must be selected.");
                            return false;
                        }
                    } else {
                        return true;
                    }
                };

                var aiRowClickHandler = function () {
                    $("table#ai-table").css("border", "2px solid white");
                    $(this).toggleClass("success");
                    
                    var nextValue = $(this).find("td").first().text();

                    if ($(this).is("[data-selected]")) {

                        $(this).removeAttr("data-selected");

                        $.ajax({
                            url: "@Url.Action("DeselectAI", "AIs", new {HttpRoute = "Api"})",
                            method: "put"
                    });

                    } else {
                        $(this).attr("data-selected", "");

                        $.ajax({
                            url: "@Url.Action("SelectAI", "AIs", new {HttpRoute = "Api"})/" + nextValue,
                            method: "put"
                        });

                    }

                    $(this).siblings("tr").removeAttr("data-selected");
                    $(this).siblings("tr").removeClass("success");
                };

                $("#random")
                    .on("click",
                        function() {
                            $("span[data-valmsg-for='OpponentPlayerName']").text("");
                            $("#btn").prop("disabled", true);
                            if (aiMustBeSelected()) {
                                $.ajax({
                                    url: "@Url.Action("StartRandomMatch", "Matches", new {HttpRoute = "Api"})",
                                    method: "post",
                                    success: function() {
                                        clearInterval(ajaxCalls);
                                        location.reload(true);
                                    },
                                    error: function(xhr, status, error) {
                                        var json = JSON.parse(xhr.responseText);
                                        toastr.error(json.message);
                                        $("#btn").prop("disabled", false);
                                    }
                                });
                            }
                        });

                var processChallenge = function() {
                    var opponentName;
                    if ($(this).is("#challenge"))
                        opponentName = $("#OpponentPlayerName").val();
                    else
                        opponentName = $(this).attr("data-value");

                    if (opponentName === undefined || opponentName === "") {
                        $("span[data-valmsg-for='OpponentPlayerName']").text("This field is required.");
                        return;
                    }

                    if (aiMustBeSelected()) {
                        $.ajax({
                            url: "@Url.Action("ChallengePlayer", "Challenges", new {HttpRoute = "Api"})/" +
                                opponentName,
                            method: "post",
                            success: function() {
                                location.reload(true);
                            },
                            error: function(xhr, status, error) {
                                var json = JSON.parse(xhr.responseText);
                                toastr.error(json.message);
                            }
                        });
                    }
                }

                var declineChallenge = function() {
                    var button = $(this);
                    @* button.closest("tr").remove(); possible improvement -> GetChallengersNames ajax call would need to change*@

                    $.ajax({
                        url: "@Url.Action("Decline", "Challenges", new {HttpRoute = "Api"})/" +
                            $(this).attr("data-value"),
                        type: "DELETE",
                        success: function() {
                            ajaxCallsFunction();
                            toastr.success("Challenge declined.");
                        }
                    });
                };


                $("#OpponentPlayerName")
                    .keypress(function(event) {
                        if (event.keyCode === 13) {
                            $("#challenge").click();
                            // stops handling other events on enter! (otherwise primary submit button would be handled)
                        }
                    });

                $("#OpponentPlayerName")
                    .on("input",
                        function() {
                            $("span[data-valmsg-for='OpponentPlayerName']").text("");
                        });

                @* works for dynamically created elements as well *@
                @* mousedown instead of click, because while mouse is *@
                @* being pressed, the control might change and the event won't fire *@
                $(document).on("click", "#challenge", processChallenge);
                $(document).on("mousedown", ".accept-challenge", processChallenge);
                $(document).on("mousedown", ".decline-challenge", declineChallenge);
                $(document).on("mousedown", ".selectable-row", aiRowClickHandler);

                // challenges polling
                var ajaxCallsFunction = function() {
                    $.ajax({
                        url: "@Url.Action("GetChallengersNames", "Challenges", new {HttpRoute = "Api"})",
                        success: function(response) {
                            var newTableBody = "";
                            for (var i = 0; i < response.length; i++) {
                                newTableBody = newTableBody +
                                    '<tr><td id="name">' +
                                    response[i] +
                                    '</td>' +
                                    '<td><button class="btn btn-link accept-challenge" data-value="' +
                                    response[i] +
                                    '">Accept</button></td>' +
                                    '<td><button type="button" class="btn btn-link decline-challenge" data-value="' +
                                    response[i] +
                                    '">Decline</button></td></tr>';
                            }

                            $("#challengesTableBody").html(newTableBody);
                        }
                    });
                    $.ajax({
                        url: "@Url.Action("GetActiveAIs", "AIs", new {HttpRoute = "Api"})",
                        success: function(response) {

                            var newTableBody = "";

                            var activeAIs = response.activeAIs;
                            var selectedAI = $("tr[data-selected]>td").text();

                            for (var i = 0; i < activeAIs.length; i++) {

                                if (activeAIs[i] === selectedAI) {
                                    newTableBody = newTableBody +
                                        '<tr class="selectable-row" data-selected><td>' +
                                        activeAIs[i] +
                                        '</td></tr>';
                                } else {

                                    newTableBody = newTableBody +
                                        '<tr class="selectable-row"><td>' +
                                        activeAIs[i] +
                                        '</td></tr>';
                                }
                            }

                            $("#aiTableBody").html(newTableBody);
                            $(".selectable-row[data-selected]").addClass("success");

                            @* Import in the case when the selected AI relogs on the server (becomes unselected in DB).
                               Might also happen in case when the toggle operation hasn't finished yet (after selection).
                               We don't know which of these cases happened, so we have to do this even for 2. case.       *@
                            if (selectedAI !== undefined && activeAIs.indexOf(selectedAI) > -1 &&
                                response.selectedAI !== selectedAI) {
                                $.ajax({
                                    url: "@Url.Action("SelectAI", "AIs", new {HttpRoute = "Api"})/" + selectedAI,
                                    method: "put"
                                });
                            }
                        }
                    });
                    $.ajax({
                        url: "@Url.Action("GetPlayerState", "User", new {HttpRoute = "Api"})",
                        method: "get",
                        success: function(response) {
                            var num = parseInt(response);
                            if (!isNaN(num) && @((int) PlayerState.Idle) !== response) {
                                clearInterval(ajaxCallsFunction);
                                location.reload(true);
                            }
                        }
                    });
                    $.ajax({
                        url: "@Url.Action("GetJoinedTournaments", "Tournaments", new {HttpRoute = "Api"})",
                        method: "get",
                        success: function(response) {
                            var newTableBody = "";
                            for (var i = 0; i < response.length; i++) {
                                var tournament = response[i];
                                var trClass = "success";
                                if (tournament.tournamentState !== @((int) TournamentState.Unstarted))
                                    trClass = "danger";

                                newTableBody += '<tr class="clickable-row ' +
                                    trClass +
                                    '" data-href="@Url.Action("Details", "Tournaments")/' +
                                    tournament.id +
                                    '">' +
                                    '<td>' +
                                    tournament.startTime +
                                    '</td>' +
                                    '<td>' +
                                    tournament.name +
                                    '</td>' +
                                    '<td>' +
                                    tournament.currentNumberOfPlayers +
                                    ' / ' +
                                    tournament.maximumNumberOfPlayers +
                                    '</td>' +
                                    '<td>' +
                                    tournament.currentPlayerJoinedAi +
                                    '</td>';
                            }
                            $("#joined-tournaments").html(newTableBody);
                        }
                    });
                };
                var ajaxCalls = setInterval(ajaxCallsFunction, 1000);
            });

    </script>
}
