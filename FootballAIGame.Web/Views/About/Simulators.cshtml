@{
    ViewBag.Title = "Simulators";
}

<h2>
    Simulators
</h2>

<section>
    <h3>Basic Information</h3>
    <p>
        There are two simulator applications that you can use to simulate matches between your
        AIs. One of them is a desktop application with a graphical user interface and a possibility to
        watch matches. The other one is a console application that is suitable for simulating multiple matches at once.
        You can use these application during your AI development for fast testing of your AI or creating AI based on
        machine learning.

        To use these applications you need to have .NET Framework 4.5 or newer.
        Besides windows, you should be able to use these application using <a href="http://www.mono-project.com/">Mono</a>
        on Linux or Mac Os X.
    </p>

    <h3>Installation</h3>
    <p>
        You only need to extract the archive to the folder where you want to keep the application.
        You can start the individual applications using their executables
        (FootballAIGame.LocalDesktopSimulator.exe and FootballAIGame.LocalConsoleSimulator.exe). <br />
    </p>

    <a href="https://www.dropbox.com/s/d5ik85qz2hgc45a/Simulators.zip?dl=0">Download Page</a>

    <h3>Detailed Informations</h3>

    <p>
        Both applications act as the server for the AI applications the same way as the main game server.
        You just need to specify the IP address accordingly (in prepared AI projects in the Main function).
        You log in to these applications with your AI the same way as you would
        connect to the main game server but only the AI name matters, all other login fields are ignored.
    </p>
    
    <p>
        You can specify the port that will be used for listening for AIs in the first
        argument of the applications. If you don't specify the port, then the default port
        50030 will be used.
    </p>

    <p>
        Both application provide mechanism for saving matches. The matches are saved in JSON format. Click on the
        following link for more information about the structure of the save file.
    </p>

    @Html.ActionLink("Match Save Structure", "SimulatorSaveStructure", "About")
    <br /> <br />

    <h4>Desktop Application</h4>
    <p>
        Desktop application provides you with the self describing graphical user interface. You can choose from the list of
        active AIs the pair for simulation and simulate the match. Then you can watch the match, see all the information about
        the match and save it. You can also load the saved matches.
    </p>
    <br />

    <h4>Console Application</h4>
    <p>
        Console Application gives you capability to simulate multiple matches at once. You can start the application
        with <code>-v</code> argument for verbose mode. The description of the commands that you can give to the application
        follows.
    </p>

    <p>
        <h5>Wait command</h5>
        <code>wait ai1 ai2 ai3 ai4 ... </code>
    </p>

    <p>
        When this command is used, the simulator waits until AIs with the specified names connect.
        It doesn't necessarily mean that at the end there will be AIs with the specified names connected. It just
        means that they were connected sometimes during the waiting (they might disconnect).
    </p>

    <p>
        <h5> Simulate command</h5>
        <code>simulate [option1, option2 ...] ai1 ai2 ai3 ai4 ... </code>.
    </p>
    
    <p>
        The square brackets must always be present (even if we don't use any option).
    </p>
    <p>
        When this command is used, the application simulates matches between the given pairs of AI (in order in which they are specified - ai1 vs ai2 ...) and
        in accordance with the specified options. After the simulations are done, the result are written to the output.
        There have to be an even number AIs and all AIs must be unique and active (logged in).
        The default output line has the following format: <code>goals1:goals2, goals3:goals4 ...</code>.
    </p>

    <h5>Options:</h5>
    <ul>
        <li>
            <p>
                <code>e</code> - Show extended result. Instead of writing only final scores to the output, the output format will be
                as followed:
            </p>
            <p>
                <code>
                    (goals1:goals2, shots1:shots2, shotsOnTarget1:shotsOnTarget2, [goalTime, ai1, Player9; ...],
                    [errorTime : ai1 - Player8 has too high acceleration.; ...]), ...
                </code>
            </p>
            <p>
                Every match result is enclosed in parentheses. Matches are divided by comma followed by one space. After initial
                shots and goals numbers there is the first pair of square brackets in which there are individual goals information
                divided by semicolon followed by one space. In the final pair of square brackets there are error messages divided by
                semicolon followed by one space.
            </p>

        </li>
        <li>
            <p><code>sd(directoryPath)</code> - Save simulated matches to the specified directory.</p>
            <p>
                Matches are saved to the files in the given directory with the following file names format:
                <code>ai1_ai2.json</code>.
            </p>
        </li>
        <li>
            <p><code>sf(file1Path; file2Path; ...)</code> - Save simulated matches to the specified files.</p>
            <p>
                Matches are saved in order to the specified files until all files or all matches are processed.
            </p>
        </li>
    </ul>
</section>

