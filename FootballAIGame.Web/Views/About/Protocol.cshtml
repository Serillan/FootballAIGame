@{
    ViewBag.Title = "Protocol";
}

<h2>
    Protocol
</h2>

<section>
    <p>If you want to create the AI client application, you need to satisfy this communication protocol.</p>
    <p>
        All messages from the server and messages that the server expects consist of the string messages in UTF-8 and binary data.
        Every string message ends with the newline character. In the following text we use [newline] to represent
        the new line character. The binary data contain 32b signed integers, that use two's complement, and 32b real numbers (floats, IEEE754).
        The binary data use little-endian order of bytes.
    </p>
</section>

<section>
    <h3>Connecting to the server</h3>
    <p>
        The game server is listening on the IP address 13.69.197.216 (gameserver.footballaigame.com) on port 50030.
    </p>
    <p>
        You need to connect to the server using TCP.
        After you are connected you will be regularly receiving <code>keepalive[newline]</code> messages.
        You can ignore them.
    </p>
    <p>
        After you have connected, you need to log in.
        The server expects a message in the form: <code>LOGIN UserName AIName AccessKey[newline]</code>.
        The access key is shown on the home page when you are logged in. The access key is used instead of password
        because the communication between your AI application and the server is not encrypted. You can also
        generate a new access key in the account manager.
    </p>
    <p>
        If your log in is successful, you will receive <code>CONNECTED[newline]</code> otherwise you will receive the message with a reason why your log in failed.
    </p>

</section>
<section>
    <h3>Match simulation</h3>
    <h4>Parameters</h4>
    <p>
        When your application receives <code>GET PARAMETERS[newline]</code>, it means that a new match simulation is starting and that
        you need to send to server your football players' parameters' settings.
    </p>
    <p>
        Your response is expected to be in the following format:
    <p>
        <code>
            PARAMATERS[newLine][player1Speed][player1Precision][player1Possession][player1KickPower][player2Speed]...[player11KickPower]
        </code>
    </p>
    </p>
    <p>
        <code>PARAMATERS[newline]</code> should be encoded in UTF8.
        Immediately after it, there should be 44 floats in the binary format.
        They describe football players' parameters. Players are ordered by their numbers (that represent their starting positions as
        described in the @Html.ActionLink("rules", "Rules", "About")).
    </p>
    <h4>Actions</h4>
    <p>
        In each simulation step the server requests actions from the both AI clients. The request has the following format:
        <code>
            GET ACTION[newLine][stepNumber][flagsByte][ballPositionX][ballPositionY][ballMovementX][ballMovementY][player1X][player1Y][player1MovementX][player1MovementY][player2X]...[player22MovementY]
        </code>
    </p>
    <p>
        The step number is an integer. All position and movement vectors' coordinates are floats.
        The first 11 players are your players and other 11 players are the opponent players.
        The least significant bit in flagsByte indicates whether a kickoff is happening.
        The kickoff happens at the start of the halftime and after a goal has been scored.
        We also treat every kick after out of play (corner kicks etc.) as the kickoff.
    </p>
    <p>
        Server expects action response in the following format:
    <p>
        <code>
            ACTION[newLine][stepNumber][player1MovementX][player1MovementY][player1KickX][player1KickY]...[player11KickY]
        </code>
    </p>
    <p>
        The step number is an integer. All movement and kick vectors' coordinates are floats.
        Movement vector of the football player describes the change of the player's position per one simulation step (200ms).
        Kick vector describes the movement vector that ball would ideally get if the kick was successful with the perfect precision.
        If the kick is not successful, it's the same case as if the kick hasn't happened.
        If the kick vectors are (0,0), then it means that the player didn't do any kick
        (to stop the ball a player needs to do a small kick (e.g. 0.001, 0.001).
    </p>
</section>

